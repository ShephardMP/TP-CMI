#! /usr/bin/env python
#
# GUI module generated by PAGE version 4.9
# In conjunction with Tcl version 8.6
#    Mar 04, 2018 04:52:05 AM
import sys

try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk
    py3 = 0
except ImportError:
    import tkinter.ttk as ttk
    py3 = 1

import VentanaSeleccion_support


def vp_start_gui(nombre='', columnas=None,Result=None,numClusters=None):
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = Tk()
    VentanaSeleccion_support.set_Tk_var()
    top = VentanaSeleccion (root,nombre,columnas, Result,numClusters)
    VentanaSeleccion_support.init(root, top)
    root.mainloop()

w = None
def create_VentanaSeleccion(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = Toplevel (root)
    VentanaSeleccion_support.set_Tk_var()
    top = VentanaSeleccion(w)
    VentanaSeleccion_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_VentanaSeleccion():
    global w
    w.destroy()
    w = None


class VentanaSeleccion:
    #genera una interfaz con indicadores y opciones y devuelve las opciones elegidas en mapaElecciones, se debe proporcionar el mapa de labels y las opciones
    #El maximo que soporta son 5 labels, further work is requiered.

   
    
    resultados=None
    
    top=None
    def cerrar(self):
        self.top.destroy()
        self.top.quit()  #esta linea es importantisima, sin esto literalmente no se limpia todo
        #es decir, queda codigo ejecutando en segunda instancia
        
   
    def aceptarOpciones(self):
        
        for i in self.listbox.curselection():
            self.resultados.append(self.listbox.get(i))#paso a una lista lo seleccionado por el list box
        
        
        self.numClusters.append(int(self.comboCantClusters.get()))
       
        self.cerrar()
        #self.adminInter.configurarCluster(self, cantClusters = int(self.comboCantClusters.get()))

    def insertarAccionesBotones(self):
        self.aceptar.configure(command=self.aceptarOpciones)
        self.cancelar.configure(command=self.cerrar)

    def __init__(self, top=None,nombre='', listColumnas=None, resultados=None,numClusters=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#d9d9d9' # X11 color: 'gray85'
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("600x400+608+384")
        top.title("Seleccionar Columnas de Clustering")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")


       

        self.aceptar = Button(top)
        self.aceptar.place(relx=0.22, rely=0.83, height=44, width=97)
        self.aceptar.configure(activebackground="#d9d9d9")
        self.aceptar.configure(activeforeground="#000000")
        self.aceptar.configure(background="#d9d9d9")
        self.aceptar.configure(disabledforeground="#a3a3a3")
        self.aceptar.configure(foreground="#000000")
        self.aceptar.configure(highlightbackground="#d9d9d9")
        self.aceptar.configure(highlightcolor="black")
        self.aceptar.configure(pady="0")
        self.aceptar.configure(text='''Aceptar''')
        self.aceptar.configure(width=117)

        self.cancelar = Button(top)
        self.cancelar.place(relx=0.42, rely=0.83, height=44, width=97)
        self.cancelar.configure(activebackground="#d9d9d9")
        self.cancelar.configure(activeforeground="#000000")
        self.cancelar.configure(background="#d9d9d9")
        self.cancelar.configure(disabledforeground="#a3a3a3")
        self.cancelar.configure(foreground="#000000")
        self.cancelar.configure(highlightbackground="#d9d9d9")
        self.cancelar.configure(highlightcolor="black")
        self.cancelar.configure(pady="0")
        self.cancelar.configure(text='''Cancelar''')

        self.labCantClusters = ttk.Label(top, text="    Cantidad de clusters")
        self.labCantClusters.place(relx=0.7, rely=0.23, height=31, width=154)
        self.labCantClusters.configure(background="#d9d9d9")

        self.comboCantClusters = ttk.Combobox(top, state="readonly", width=15 )
        self.comboCantClusters.place(relx=0.72, rely=0.33, relheight=0.05, relwidth=0.24)
        self.comboCantClusters["values"] = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
        self.comboCantClusters.set(2)

       
        self.resultados=resultados
        self.numClusters=numClusters
        self.top=top
      
        self.listbox=None
       
        if(listColumnas is not None):
            
                    Label1 = Label(top)
                    Label1.place(relx=0.28, rely=0.13, height=21, width=134)
                    Label1.configure(background="#d9d9d9")
                    Label1.configure(disabledforeground="#a3a3a3")
                    Label1.configure(foreground="#000000")
                    Label1.configure(text=nombre)

                            
                    self.listbox = Listbox(top)
                    self.listbox.configure(selectmode = MULTIPLE) #para seleccionar multiples valores
                    self.listbox.place(relx=0.12, rely=0.23, relheight=0.53, relwidth=0.56)
                    self.listbox.configure(background="white")
                    self.listbox.configure(disabledforeground="#a3a3a3")
                    self.listbox.configure(font="TkFixedFont")
                    self.listbox.configure(foreground="#000000")
                    self.listbox.configure(width=144)
                    self.listbox.configure(exportselection=False) #permite mantener la seleccion aun despues de cambiar de widget
                    for columna in listColumnas:
                        self.listbox.insert(END, columna) #se inserta cada columnas en la listbox
                   
                    #TCombobox1.bind("<<ComboboxSelected>>", self.selection_changed)  EVENTO

     
                  



        self.insertarAccionesBotones()



if __name__ == '__main__':
    vp_start_gui()
