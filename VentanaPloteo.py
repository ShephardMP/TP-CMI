#! /usr/bin/env python
#
# GUI module generated by PAGE version 4.9
# In conjunction with Tcl version 8.6
#    Apr 17, 2018 01:12:15 AM
import sys

try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk
    py3 = 0
except ImportError:
    import tkinter.ttk as ttk
    py3 = 1

import ventanaPloteo_support
import matplotlib 
#matplotlib.use('TkAgg')
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg, NavigationToolbar2TkAgg
from matplotlib.figure import Figure


def vp_start_gui(figura=None):
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = Tk()
    top = VentanaPloteo (root,figura)
    ventanaPloteo_support.init(root, top)
    root.mainloop()

w = None
def create_VentanaPloteo(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = Toplevel (root)
    top = VentanaPloteo (w)
    ventanaPloteo_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_VentanaPloteo():
    global w
    w.destroy()
    w = None


class VentanaPloteo:
    
    def close(self):
        
        self.top.destroy()  #Este se encarga de limpiar los widgets pero no necesariamente termina la ejecucion del mainloop
        #especialmente si top es una instancia de topLevel
        self.top.quit() #salgo del mainloop, sin embargo puede existir codigo todavia ejecutando por detras
        #este es el caso del ploteo y el metodo draw(). Son metodos que pueden seguir interactuando con los widgets
        
        #aunque parezca contradictorio la union de estos dos metodos permite que termine la ventana correctamente
    def __init__(self, top=None, figura=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85' 
        _ana2color = '#d9d9d9' # X11 color: 'gray85' 
        self.top=top
        self.top.geometry("607x450+610+154")
        self.top.title("VentanaPloteo")
        self.top.configure(background="#d9d9d9")
            

        '''
        self.plot = Canvas(top)
        self.plot.place(relx=0.0, rely=0.0, relheight=0.96, relwidth=0.97)
        self.plot.configure(background="white")
        self.plot.configure(borderwidth="2")
        self.plot.configure(insertbackground="black")
        self.plot.configure(relief=RIDGE)
        self.plot.configure(selectbackground="#c4c4c4")
        self.plot.configure(selectforeground="black")
        self.plot.configure(width=586)
'''

        self.top.protocol("WM_DELETE_WINDOW",self.close)
        #protocol es una parte de la libreria tkinter, permite aplicar funcionalidad junto con el WINDOWS MANAGER
        #Aca, cuando apreto la X que cierra la ventana se ejecuta el metodo self.close
        self.plot = FigureCanvasTkAgg(figura, master=top)
        
      
        
        toolbar = NavigationToolbar2TkAgg(self.plot, top) #es la barra de abajo de navegacion
        toolbar.update()
        self.plot._tkcanvas.pack(side=TOP, fill=BOTH, expand=1) 
        #en realidad es Tkinter.TOP pero importe como from tkinter import * (esto podria ser una mala practica pero no afecta mucho en este modulo)
        self.plot.draw()
       
        
if __name__ == '__main__':
    
    f=Figure(figsize=(6,6))
    ax=f.add_subplot(111)
    ax.scatter([1,2,3,2,7],[2,3,42,1,3])
    ax.axis(tight=True)
    vp_start_gui(f)
   


