#! /usr/bin/env python
#
# GUI module generated by PAGE version 4.9
# In conjunction with Tcl version 8.6
#    Oct 14, 2018 03:29:29 AM
import sys

try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk
    py3 = 0
except ImportError:
    import tkinter.ttk as ttk
    py3 = 1

import EntradaParametros_support

def vp_start_gui(listaParametros=None):
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = Tk()
    top = Entrada_de_parametros (root,listaParametros)
    EntradaParametros_support.init(root, top)
    root.mainloop()

w = None
def create_Entrada_de_parametros(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = Toplevel (root)
    top = Entrada_de_parametros (w)
    EntradaParametros_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Entrada_de_parametros():
    global w
    w.destroy()
    w = None



class Entrada_de_parametros:
    #el objetivo es retornar los parametros ingresados en la entry, que debe ser una secuencia de numeros o strings (entre comillas) separados por ;
    listaParametros=None
    top=None
    def cerrar(self):
        self.top.destroy()
        self.top.quit()  #esta linea es importantisima, sin esto literalmente no se limpia todo
        #es decir, queda codigo ejecutando en segunda instancia


    def aceptarParametros(self):
        entryString=self.Entrada.get() #saco todo el string, incluso con ; que fue ingresado
        entryString=entryString+";" #seguridad
        entryString=entryString.split(';')[:len(entryString)] #separo por ; hasta el ultimo elemento (se espera para1;para2;para3;<espacio vacio que cuenta para split>)
        entryString=[item for item in entryString if item is not ''] #skippeo todos los '', que pueden ser errores y o falta de ; en ultimo parametro
        #print("entry string {}".format(entryString))
        for para in entryString:

            if para.isdigit(): #lo que habia era un digito, por ejemplo 1. NO CONFUNDIR CON "1"
                self.listaParametros.append(int(para))
            else:
                self.listaParametros.append(para) #agrego el string de una

        self.cerrar()

    def insertarAccionesBotones(self):
        self.Aceptar.configure(command=self.aceptarParametros)
        self.Cancelar.configure(command=self.cerrar)

    def __init__(self, top=None,listaParametros=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#d9d9d9' # X11 color: 'gray85'
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("358x74+615+447")
        top.title("Entrada de parametros")
        top.configure(background="#d9d9d9")


        
        self.top=top
        self.listaParametros=listaParametros

        self.Entrada = ttk.Entry(top)
        self.Entrada.place(relx=0.06, rely=0.14, relheight=0.28, relwidth=0.88)
        self.Entrada.configure(width=316)
        self.Entrada.configure(takefocus="")
        self.Entrada.configure(cursor="ibeam")

        self.Aceptar = ttk.Button(top)
        self.Aceptar.place(relx=0.28, rely=0.54, height=25, width=76)
        self.Aceptar.configure(takefocus="")
        self.Aceptar.configure(text='''Aceptar''')

        self.Cancelar = ttk.Button(top)
        self.Cancelar.place(relx=0.53, rely=0.54, height=25, width=76)
        self.Cancelar.configure(takefocus="")
        self.Cancelar.configure(text='''Cancelar''')

        self.insertarAccionesBotones()




if __name__ == '__main__':
    vp_start_gui()
